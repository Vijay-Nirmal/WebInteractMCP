[
  {
    "toolId": "stack-overflow-welcome",
    "title": "Stack Overflow Clone Welcome Tour",
    "description": "Introduces new users to the Stack Overflow clone platform features",
    "mode": "normal",
    "steps": [
      {
        "targetElement": "app-header",
        "content": "Welcome to AutoBot - our Stack Overflow clone! This is the main navigation header where you can access different sections of the platform.",
        "shepherdOptions": {
          "attachTo": {
            "on": "bottom"
          }
        }
      },
      {
        "targetElement": "app-left-sidebar",
        "content": "The sidebar contains quick navigation links to important sections like Home, Questions, Tags, and Users.",
        "shepherdOptions": {
          "attachTo": {
            "on": "right"
          }
        }
      },
      {
        "targetElement": ".btn-primary",
        "content": "Use this 'Ask Question' button to post new questions to the community. It's the primary way to get help!",
        "shepherdOptions": {
          "attachTo": {
            "on": "bottom"
          }
        }
      },
      {
        "targetElement": ".questions-tabs",
        "content": "These tabs help you filter questions by different criteria like 'Interesting', 'Hot', or by time periods.",
        "shepherdOptions": {
          "attachTo": {
            "on": "bottom"
          }
        }
      },
      {
        "targetElement": ".questions-list",
        "content": "Here you'll find all the questions posted by the community. Each question shows votes, answers, and views.",
        "shepherdOptions": {
          "attachTo": {
            "on": "top"
          }
        }
      }
    ]
  },
  {
    "toolId": "ask-question-guide",
    "title": "How to Ask a Question",
    "description": "Step-by-step guide for asking effective questions",
    "mode": "buttonless",
    "pageMatcher": "/ask",
    "steps": [
      {
        "targetElement": "#question-title",
        "content": "Start with a clear, descriptive title that summarizes your problem in one line.",
        "delay": 4000,
        "shepherdOptions": {
          "attachTo": {
            "on": "top"
          }
        }
      },
      {
        "targetElement": "#question-body",
        "content": "Provide detailed information about your problem. Include code examples, error messages, and what you've tried.",
        "delay": 5000,
        "shepherdOptions": {
          "attachTo": {
            "on": "top"
          }
        }
      },
      {
        "targetElement": "#question-tags",
        "content": "Add relevant tags to help others find and categorize your question. Use specific technology names.",
        "delay": 4000,
        "shepherdOptions": {
          "attachTo": {
            "on": "top"
          }
        }
      },
      {
        "targetElement": ".submit-question",
        "content": "Review your question and click submit when you're ready to post it to the community.",
        "delay": 3000,
        "shepherdOptions": {
          "attachTo": {
            "on": "top"
          }
        }
      }
    ]
  },
 {
    "toolId": "auto-question-demo",
    "title": "Automatic Question Creation Demo",
    "description": "Demonstrates automated question posting for demo purposes",
    "mode": "silent",
    "pageMatcher": "/ask",
    "options": {
      "debugMode": true,
      "elementTimeout": 8000,
      "actionDelay": 1000,
      "highlightDuration": 3000
    },
    "parameterSchema": {
      "parameters": {
        "questionTitle": {
          "type": "string",
          "description": "The title of the question to be posted",
          "required": true,
          "minLength": 10,
          "maxLength": 200,
          "examples": ["How to implement TypeScript interfaces?", "What is the difference between let and var in JavaScript?"]
        },
        "questionBody": {
          "type": "string",
          "description": "The detailed body content of the question including code examples and context",
          "required": true,
          "minLength": 50,
          "examples": ["I'm trying to understand TypeScript interfaces. Here's my code:\n\n```typescript\ninterface User {\n  name: string;\n  age: number;\n}\n```\n\nHow do I properly implement this interface in my classes?"]
        },
        "tags": {
          "type": "string",
          "description": "Comma-separated list of relevant tags for the question without any space before or after commas (e.g., 'javascript,typescript,react')",
          "required": true,
          "pattern": "^[^\\s,]+(,[^\\s,]+)*$",
          "examples": ["javascript,typescript", "react,javascript,frontend", "python,django,web-development"]
        }
      },
      "required": ["questionTitle", "questionBody", "tags"],
      "metadata": {
        "version": "1.0",
        "author": "AutoBot Development Team"
      }
    },
    "steps": [
      {
        "targetElement": "#question-title",
        "content": "Filling in the question title...",
        "action": {
          "type": "fillInput",
          "element": "#question-title",
          "value": "{{questionTitle}}"
        }
      },
      {
        "targetElement": "#question-body",
        "content": "Adding question details...",
        "action": {
          "type": "fillInput",
          "element": "#question-body",
          "value": "{{questionBody}}"
        }
      },
      {
        "targetElement": "#question-tags",
        "content": "Adding relevant tags...",
        "stopOnFailure": true,
        "action": {
          "type": "fillInput",
          "element": "#question-tags",
          "value": "{{tags}}",
          "delay": 2000
        }
      }
    ]
  },
  {
    "toolId": "navigation-demo",
    "title": "Platform Navigation Demo",
    "description": "Shows how to navigate between different sections",
    "mode": "silent",
    "steps": [
      {
        "targetElement": "[routerLink='/']",
        "content": "",
        "action": {
          "type": "click",
          "element": "[routerLink='/']"
        }
      }
    ]
  },
  {
    "toolId": "user-interaction-tour",
    "title": "User Interaction Features",
    "description": "Showcases voting, commenting, and other interactive features",
    "mode": "buttonless",
    "pageMatcher": "/",
    "steps": [
      {
        "targetElement": ".vote-score",
        "content": "This shows the vote score for each question. Higher scores indicate more useful questions.",
        "delay": 3000,
        "shepherdOptions": {
          "attachTo": {
            "on": "right"
          }
        }
      },
      {
        "targetElement": ".answer-count",
        "content": "The answer count shows how many people have responded to this question.",
        "delay": 3000,
        "shepherdOptions": {
          "attachTo": {
            "on": "right"
          }
        }
      },
      {
        "targetElement": ".view-count",
        "content": "View count indicates how many times this question has been viewed by users.",
        "delay": 3000,
        "shepherdOptions": {
          "attachTo": {
            "on": "right"
          }
        }
      },
      {
        "targetElement": ".question-tags",
        "content": "Tags help categorize questions and make them easier to find for people with expertise in specific areas.",
        "delay": 4000,
        "shepherdOptions": {
          "attachTo": {
            "on": "top"
          }
        }
      }
    ]
  },
  {
    "toolId": "search-and-filter",
    "title": "Search and Filter Questions",
    "description": "Learn how to find specific questions using search and filters",
    "mode": "normal",
    "steps": [
      {
        "targetElement": ".search-input",
        "content": "Use the search bar to find questions related to specific topics or technologies.",
        "shepherdOptions": {
          "attachTo": {
            "on": "bottom"
          }
        }
      },
      {
        "targetElement": ".questions-tabs",
        "content": "Use these filter tabs to sort questions by different criteria like popularity or recency.",
        "shepherdOptions": {
          "attachTo": {
            "on": "bottom"
          }
        }
      },
      {
        "targetElement": ".pagination",
        "content": "Navigate through multiple pages of questions using the pagination controls at the bottom.",
        "shepherdOptions": {
          "attachTo": {
            "on": "top"
          }
        }
      }
    ]
  },
  {
    "toolId": "debug-test",
    "title": "Debug Test Tool",
    "description": "Simple test tool for debugging",
    "mode": "silent",
    "steps": [
      {
        "targetElement": "body",
        "content": "Testing console log...",
        "action": {
          "type": "click",
          "element": "body"        }
      }
    ]
  },  {
    "toolId": "custom-function-demo",
    "title": "Custom Function Demo",
    "description": "Demonstrates the execution of custom TypeScript/JavaScript functions as part of tool steps",
    "mode": "silent",
    "parameterSchema": {
      "parameters": {
        "welcomeMessage": {
          "type": "string",
          "description": "Custom welcome message to display in the alert",
          "required": false,
          "defaultValue": "Welcome to the Custom Function Demo! This alert was triggered by a custom function executed as part of a tool step.",
          "maxLength": 500,
          "examples": ["Hello from the MCP Elements demo!", "Welcome to our interactive tour!"]
        },
        "highlightColor": {
          "type": "string",
          "description": "Hex color code for element highlighting (must include #)",
          "required": false,
          "defaultValue": "#4f46e5",
          "pattern": "^#[0-9a-fA-F]{6}$",
          "examples": ["#ff0000", "#00ff00", "#0000ff", "#4f46e5"]
        },
        "highlightDuration": {
          "type": "number",
          "description": "Duration in milliseconds for the highlight effect",
          "required": false,
          "defaultValue": 4000,
          "minimum": 1000,
          "maximum": 10000,
          "examples": [2000, 3000, 5000]
        },
        "enableConsoleLogging": {
          "type": "boolean",
          "description": "Whether to enable console logging during the demo",
          "required": false,
          "defaultValue": true,
          "examples": [true, false]
        }
      },
      "metadata": {
        "version": "1.1"
      }
    },
    "steps": [
      {
        "targetElement": "body",
        "content": "Starting custom function demonstration",
        "action": {
          "type": "executeFunction",
          "functionName": "showAlert",
          "functionParams": {
            "message": "{{welcomeMessage}}"
          }
        }
      },
      {
        "targetElement": "app-header",
        "content": "Highlighting the header with custom styling",
        "action": {
          "type": "executeFunction",
          "functionName": "highlightElement",
          "functionParams": {
            "color": "{{highlightColor}}",
            "duration": "{{highlightDuration}}"
          }
        }
      },
      {
        "targetElement": ".btn-primary",
        "content": "Highlighting the Ask Question button",
        "action": {
          "type": "executeFunction",
          "functionName": "highlightElement",
          "functionParams": {
            "color": "#059669",
            "duration": 3000
          }
        }
      },
      {
        "targetElement": "app-left-sidebar",
        "content": "Collecting form data from the page",
        "action": {
          "type": "executeFunction",
          "functionName": "collectFormData",
          "functionParams": {
            "enableLogging": "{{enableConsoleLogging}}"
          }
        }
      },
      {
        "targetElement": "body",
        "content": "Custom function demo completed",
        "action": {
          "type": "executeFunction",
          "functionName": "showAlert",
          "functionParams": {
            "message": "Custom Function Demo completed! Check the console for logged data from the collectFormData function."
          }
        }
      }
    ]
  },
  {
    "toolId": "return-value-demo",
    "title": "Return Value Demonstration",
    "description": "Demonstrates how return values work between steps and as tool results",
    "mode": "silent",
    "parameterSchema": {
      "parameters": {
        "initialValue": {
          "type": "string",
          "description": "Initial value to start the demo with",
          "required": false,
          "defaultValue": "Hello World",
          "examples": ["Hello World", "Test Value", "Demo Data"]
        }
      },
      "metadata": {
        "version": "1.0",
        "author": "AutoBot Development Team"
      }
    },
    "steps": [
      {
        "targetElement": "body",
        "content": "Step 1: Set a hardcoded return value",
        "returnValue": {
          "value": "Step 1 completed with static value"
        },
        "action": {
          "type": "executeFunction",
          "functionName": "logMessage",
          "functionParams": {
            "message": "Step 1 executing with initial value: {{initialValue}}"
          }
        }
      },
      {
        "targetElement": "app-header",
        "content": "Step 2: Use a provider function to calculate return value",
        "returnValue": {
          "providerName": "calculateNextValue",
          "providerParams": {
            "multiplier": 2
          }
        },
        "action": {
          "type": "executeFunction",
          "functionName": "logMessage",
          "functionParams": {
            "message": "Step 2 executing, previous step returned: {{previousValue}}"
          }
        }
      },
      {
        "targetElement": "app-left-sidebar",
        "content": "Step 3: Return value from executeFunction action",
        "action": {
          "type": "executeFunction",
          "functionName": "processData",
          "functionParams": {
            "inputData": "{{initialValue}}"
          }
        }
      },
      {
        "targetElement": ".btn-primary",
        "content": "Step 4: Final step combining all previous return values",
        "returnValue": {
          "providerName": "combineAllValues"
        },
        "action": {
          "type": "executeFunction",
          "functionName": "logMessage",
          "functionParams": {
            "message": "Final step executing"
          }
        }
      }
    ]
  },
  {
    "toolId": "tool-level-return-demo",
    "title": "Tool-Level Return Value Demo",
    "description": "Demonstrates tool-level return values that override step return values",
    "mode": "silent",
    "parameterSchema": {
      "parameters": {
        "toolName": {
          "type": "string",
          "description": "Name of the tool for demonstration",
          "required": false,
          "defaultValue": "Tool Level Demo",
          "examples": ["Demo Tool", "Sample Tool", "Test Tool"]
        },
        "priority": {
          "type": "number",
          "description": "Priority level for the tool",
          "required": false,
          "defaultValue": 1,
          "minimum": 1,
          "maximum": 10,
          "examples": [1, 5, 10]
        }
      },
      "metadata": {
        "version": "1.0",
        "author": "AutoBot Development Team"
      }
    },
    "returnValue": {
      "providerName": "generateToolSummary",
      "providerParams": {
        "includeMetrics": true,
        "format": "detailed"
      }
    },
    "steps": [
      {
        "targetElement": "body",
        "content": "Step 1: This step returns a simple value",
        "returnValue": {
          "value": "Step 1 result: Basic execution"
        },
        "action": {
          "type": "executeFunction",
          "functionName": "logMessage",
          "functionParams": {
            "message": "Step 1 of tool-level return demo: {{toolName}}"
          }
        }
      },
      {
        "targetElement": "app-header",
        "content": "Step 2: This step uses a provider function",
        "returnValue": {
          "providerName": "calculateNextValue",
          "providerParams": {
            "multiplier": 3
          }
        },
        "action": {
          "type": "executeFunction",
          "functionName": "logMessage",
          "functionParams": {
            "message": "Step 2 executing with priority: {{priority}}"
          }
        }
      },
      {
        "targetElement": "app-left-sidebar",
        "content": "Step 3: This step's return value will be overridden by tool-level return",
        "returnValue": {
          "value": "Step 3 result: This will be overridden by tool-level return value"
        },
        "action": {
          "type": "executeFunction",
          "functionName": "processData",
          "functionParams": {
            "inputData": "Final step data for {{toolName}}"
          }
        }
      }
    ]
  }
]